{
  "hash": "0f31152d9d1bf2f80103aa9030461c87",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"4 - Evaluar modelos\"\nsubtitle: \"Introducciendo Tidymodels\"\nformat:\n  revealjs: \n    slide-number: true\n    footer: <https://workshops.tidymodels.org>\n    include-before-body: header.html\n    include-after-body: footer-annotations.html\n    theme: [default, tidymodels.scss]\n    width: 1280\n    height: 720\nknitr:\n  opts_chunk: \n    echo: true\n    collapse: true\n    comment: \"#>\"\n    fig.path: \"figures/\"\nexecute: \n  eval: true\n---\n\n\n\n\n## Viendo las predicciones\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\naugment(taxi_ajustado, new_data = taxi_entrenar) %>%\n  relocate(propina, .pred_class, .pred_si, .pred_no)\n#> # A tibble: 8,000 × 10\n#>    propina .pred_class .pred_si .pred_no distancia compania    local dia   mes  \n#>    <fct>   <fct>          <dbl>    <dbl>     <dbl> <fct>       <fct> <fct> <fct>\n#>  1 si      si             0.967   0.0333     17.2  Chicago In… no    Jue   Feb  \n#>  2 si      si             0.935   0.0646      0.88 City Servi… si    Jue   Mar  \n#>  3 si      si             0.967   0.0333     18.1  otra        no    Lun   Feb  \n#>  4 si      si             0.949   0.0507     12.2  Chicago In… no    Dom   Mar  \n#>  5 si      si             0.821   0.179       0.94 Sun Taxi    si    Sab   Abr  \n#>  6 si      si             0.967   0.0333     17.5  Flash Cab   no    Vie   Mar  \n#>  7 si      si             0.967   0.0333     17.7  otra        no    Dom   Ene  \n#>  8 si      si             0.938   0.0616      1.85 Taxicab In… no    Vie   Abr  \n#>  9 si      si             0.938   0.0616      0.53 Sun Taxi    no    Mar   Mar  \n#> 10 si      si             0.931   0.0694      6.65 Taxicab In… no    Dom   Abr  \n#> # ℹ 7,990 more rows\n#> # ℹ 1 more variable: hora <int>\n```\n:::\n\n\n## Matriz de confusión ![](hexes/yardstick.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n![](images/matriz-confusion.png){width=800}\n\n\n\n\n## Matriz de confusión ![](hexes/yardstick.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\naugment(taxi_ajustado, new_data = taxi_entrenar) %>%\n  conf_mat(truth = propina, estimate = .pred_class)\n#>           Truth\n#> Prediction   si   no\n#>         si 7341  536\n#>         no   43   80\n```\n:::\n\n\n## Matriz de confusión ![](hexes/yardstick.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\naugment(taxi_ajustado, new_data = taxi_entrenar) %>%\n  conf_mat(truth = propina, estimate = .pred_class) %>%\n  autoplot(type = \"heatmap\")\n```\n\n::: {.cell-output-display}\n![](figures/conf-mat-plot-1.svg)\n:::\n:::\n\n\n## Mediciones de la calidad del modelo ![](hexes/yardstick.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n::: columns\n::: {.column width=\"60%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\naugment(taxi_ajustado, new_data = taxi_entrenar) %>%\n  accuracy(truth = propina, estimate = .pred_class)\n#> # A tibble: 1 × 3\n#>   .metric  .estimator .estimate\n#>   <chr>    <chr>          <dbl>\n#> 1 accuracy binary         0.928\n```\n:::\n\n:::\n\n::: {.column width=\"40%\"}\n![](images/matriz-confusion-exactitud.png)\n:::\n:::\n\n## El riesgo de concentrarse en la exactitud ![](hexes/yardstick.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\nHay que tener cuidado utilizando exactitud (`accuracy()`) ya que nos puede dar\n\"buenos\" resultado se predecimos con datos que no están balanceados\n\n\n::: {.cell}\n\n```{.r .cell-code}\naugment(taxi_ajustado, new_data = taxi_entrenar) %>%\n  mutate(.pred_class = factor(\"si\", levels = c(\"si\", \"no\"))) %>%\n  accuracy(truth = propina, estimate = .pred_class)\n#> # A tibble: 1 × 3\n#>   .metric  .estimator .estimate\n#>   <chr>    <chr>          <dbl>\n#> 1 accuracy binary         0.923\n```\n:::\n\n\n## Mediciones de la calidad del modelo ![](hexes/yardstick.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n::: columns\n::: {.column width=\"60%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\naugment(taxi_ajustado, new_data = taxi_entrenar) %>%\n  sensitivity(truth = propina, estimate = .pred_class)\n#> # A tibble: 1 × 3\n#>   .metric     .estimator .estimate\n#>   <chr>       <chr>          <dbl>\n#> 1 sensitivity binary         0.994\n```\n:::\n\n:::\n\n::: {.column width=\"40%\"}\n![](images/matriz-confusion-sensibilidad.png)\n:::\n:::\n\n\n## Mediciones de la calidad del modelo ![](hexes/yardstick.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n::: columns\n::: {.column width=\"60%\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3-6\"}\naugment(taxi_ajustado, new_data = taxi_entrenar) %>%\n  sensitivity(truth = propina, estimate = .pred_class)\n#> # A tibble: 1 × 3\n#>   .metric     .estimator .estimate\n#>   <chr>       <chr>          <dbl>\n#> 1 sensitivity binary         0.994\n```\n:::\n\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\naugment(taxi_ajustado, new_data = taxi_entrenar) %>%\n  specificity(truth = propina, estimate = .pred_class)\n#> # A tibble: 1 × 3\n#>   .metric     .estimator .estimate\n#>   <chr>       <chr>          <dbl>\n#> 1 specificity binary         0.130\n```\n:::\n\n:::\n\n::: {.column width=\"40%\"}\n![](images/matriz-confusion-especificidad.png)\n:::\n:::\n\n## Mediciones de la calidad del modelo ![](hexes/yardstick.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\nPara combinar multiples cálculos en una tabla, usa `metric_set()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntaxi_metrics <- metric_set(accuracy, specificity, sensitivity)\n\naugment(taxi_ajustado, new_data = taxi_entrenar) %>%\n  taxi_metrics(truth = propina, estimate = .pred_class)\n#> # A tibble: 3 × 3\n#>   .metric     .estimator .estimate\n#>   <chr>       <chr>          <dbl>\n#> 1 accuracy    binary         0.928\n#> 2 specificity binary         0.130\n#> 3 sensitivity binary         0.994\n```\n:::\n\n\n## Mediciones de la calidad del modelo ![](hexes/yardstick.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntaxi_metrics <- metric_set(accuracy, specificity, sensitivity)\n\naugment(taxi_ajustado, new_data = taxi_entrenar) %>%\n  group_by(local) %>%\n  taxi_metrics(truth = propina, estimate = .pred_class)\n#> # A tibble: 6 × 4\n#>   local .metric     .estimator .estimate\n#>   <fct> <chr>       <chr>          <dbl>\n#> 1 si    accuracy    binary         0.898\n#> 2 no    accuracy    binary         0.935\n#> 3 si    specificity binary         0.169\n#> 4 no    specificity binary         0.116\n#> 5 si    sensitivity binary         0.987\n#> 6 no    sensitivity binary         0.996\n```\n:::\n\n\n## Resultados de dos clases\n\nEstas métricas asumen que sabemos cual es límite para convertir probabilidades de\npredicción \"suaves\" a prediciones de clase \"duras\"\n. . .\n\n¿Es bueno un límite de 50%?\n\n¿Que pasaría si lo cambiamos a 80%?\n\n-   sensibilidad ⬇️, especificidad ⬆️\n\n. . .\n\n¿Y si lo cambiamos a 20%?\n\n\n-   sensibilidad ⬆️, especificidad ⬇️\n\n## Varying the threshold\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](figures/thresholds-1.svg)\n:::\n:::\n\n\n## Curvas ROC\n\nPara crear una \"curva ROC\", osea una curva de *característica operativa del \nreceptor* hacemos lo siguiente:\n\n- Calcular la sensibilidad y especificidad de todos los límites posibles\n\n- Gráficar los falsos positivos en el axis X, contra los positivos verdaderos\nen el axis Y.\n\nYa que la sensibilidad es la proporción de positivos verdaderos, y la especificidad \nes la de los negativos verdaderos, entonces `1 - especificidad` es la\nproporción de los falsos positivos.\n\n. . .\n\nPodemos usar el **area debajo de la curva** (AUC = area under de curve) \nROC como una métrica de clasificación:\n\n- ROC AUC = 1 💯 \n- ROC AUC = 1/2 😢\n\n:::notes\nROC curves are insensitive to class imbalance.\n:::\n\n## Curvas ROC ![](hexes/yardstick.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assumes _first_ factor level is event; there are options to change that\naugment(taxi_ajustado, new_data = taxi_entrenar) %>% \n  roc_curve(truth = propina, .pred_si) %>%\n  slice(1, 20, 50)\n#> # A tibble: 3 × 3\n#>   .threshold specificity sensitivity\n#>        <dbl>       <dbl>       <dbl>\n#> 1   -Inf           0         1      \n#> 2      0.783       0.209     0.981  \n#> 3      1           1         0.00135\n\naugment(taxi_ajustado, new_data = taxi_entrenar) %>% \n  roc_auc(truth = propina, .pred_si)\n#> # A tibble: 1 × 3\n#>   .metric .estimator .estimate\n#>   <chr>   <chr>          <dbl>\n#> 1 roc_auc binary         0.691\n```\n:::\n\n\n## Gráfica de curvas ROC ![](hexes/yardstick.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\naugment(taxi_ajustado, new_data = taxi_entrenar) %>% \n  roc_curve(truth = propina, .pred_si) %>%\n  autoplot()\n```\n\n::: {.cell-output-display}\n![](figures/roc-curve-1.svg)\n:::\n:::\n\n\n## Tu turno {transition=\"slide-in\"}\n\n![](images/parsnip-flagger.jpg){.absolute top=\"0\" right=\"0\" width=\"150\" height=\"150\"}\n\n*Calcule y gráfique una curva ROC con su modelo*\n\n*¿Cuales son los datos que se utilizaron para esta curva ROC?*\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"roc-curve\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n##  {background-iframe=\"https://yardstick.tidymodels.org/reference/index.html\"}\n\n::: footer\n:::\n\n# ⚠️ LOS PELIGROS DEL SOBREAJUSTAR ⚠️\n\n## Los peligros del sobreajustar ⚠️\n\n![](https://raw.githubusercontent.com/topepo/2022-nyr-workshop/main/images/tuning-overfitting-train-1.svg)\n\n## Los peligros del sobreajustar ⚠️\n\n![](https://raw.githubusercontent.com/topepo/2022-nyr-workshop/main/images/tuning-overfitting-test-1.svg)\n\n## Los peligros del sobreajustar ⚠️ ![](hexes/yardstick.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntaxi_ajustado %>%\n  augment(taxi_entrenar)\n#> # A tibble: 8,000 × 10\n#>    .pred_class .pred_si .pred_no propina distancia compania    local dia   mes  \n#>    <fct>          <dbl>    <dbl> <fct>       <dbl> <fct>       <fct> <fct> <fct>\n#>  1 si             0.967   0.0333 si          17.2  Chicago In… no    Jue   Feb  \n#>  2 si             0.935   0.0646 si           0.88 City Servi… si    Jue   Mar  \n#>  3 si             0.967   0.0333 si          18.1  otra        no    Lun   Feb  \n#>  4 si             0.949   0.0507 si          12.2  Chicago In… no    Dom   Mar  \n#>  5 si             0.821   0.179  si           0.94 Sun Taxi    si    Sab   Abr  \n#>  6 si             0.967   0.0333 si          17.5  Flash Cab   no    Vie   Mar  \n#>  7 si             0.967   0.0333 si          17.7  otra        no    Dom   Ene  \n#>  8 si             0.938   0.0616 si           1.85 Taxicab In… no    Vie   Abr  \n#>  9 si             0.938   0.0616 si           0.53 Sun Taxi    no    Mar   Mar  \n#> 10 si             0.931   0.0694 si           6.65 Taxicab In… no    Dom   Abr  \n#> # ℹ 7,990 more rows\n#> # ℹ 1 more variable: hora <int>\n```\n:::\n\n\nA esto le llamamos \"resubstitución\" ó \"repredecir en los datos de entrenamiento\"\n\n\n## Los peligros del sobreajustar ⚠️ ![](hexes/yardstick.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntaxi_ajustado %>%\n  augment(taxi_entrenar) %>%\n  accuracy(propina, .pred_class)\n#> # A tibble: 1 × 3\n#>   .metric  .estimator .estimate\n#>   <chr>    <chr>          <dbl>\n#> 1 accuracy binary         0.928\n```\n:::\n\n\nA esto le llamamos \"resubstitución de la estimación\"\n\n## Los peligros del sobreajustar ⚠️ ![](hexes/yardstick.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ntaxi_ajustado %>%\n  augment(taxi_entrenar) %>%\n  accuracy(propina, .pred_class)\n#> # A tibble: 1 × 3\n#>   .metric  .estimator .estimate\n#>   <chr>    <chr>          <dbl>\n#> 1 accuracy binary         0.928\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n:::\n:::\n\n## Los peligros del sobreajustar ⚠️ ![](hexes/yardstick.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ntaxi_ajustado %>%\n  augment(taxi_entrenar) %>%\n  accuracy(propina, .pred_class)\n#> # A tibble: 1 × 3\n#>   .metric  .estimator .estimate\n#>   <chr>    <chr>          <dbl>\n#> 1 accuracy binary         0.928\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ntaxi_ajustado %>%\n  augment(taxi_prueba) %>%\n  accuracy(propina, .pred_class)\n#> # A tibble: 1 × 3\n#>   .metric  .estimator .estimate\n#>   <chr>    <chr>          <dbl>\n#> 1 accuracy binary         0.908\n```\n:::\n\n:::\n:::\n\n. . .\n\n⚠️ Acuerdate que estamos demonstrando el sobreajuste\n\n. . .\n\n\n⚠️ No utilizes el set the prueba sino hasta el *fin* de tu analisis\n\n## \"Ja-ja-ja, estoy en peligro\" {background-image=\"https://media.giphy.com/media/55itGuoAJiZEEen9gg/giphy.gif\" background-size=\"70%\"}\n\n\n\n## Tu turno {transition=\"slide-in\"}\n\n![](images/parsnip-flagger.jpg){.absolute bottom=\"0\" left=\"0\" width=\"150\" height=\"150\"}\n\n*Usa `augment()` y una función de métrica para calcular una métrica de classificación,\npor ejemplo `brier_class()`*\n\n\n*Calcula las métricas para los datos de entrenamiento y de prueba para\ndemonstrar el sobreajuste*\n\n*Nota la evidencia de sobreajuste* ⚠️\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"augment-metrics\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## Los peligros del sobreajustar ⚠️ ![](hexes/yardstick.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ntaxi_ajustado %>%\n  augment(taxi_entrenar) %>%\n  brier_class(propina, .pred_si)\n#> # A tibble: 1 × 3\n#>   .metric     .estimator .estimate\n#>   <chr>       <chr>          <dbl>\n#> 1 brier_class binary        0.0632\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ntaxi_ajustado %>%\n  augment(taxi_prueba) %>%\n  brier_class(propina, .pred_si)\n#> # A tibble: 1 × 3\n#>   .metric     .estimator .estimate\n#>   <chr>       <chr>          <dbl>\n#> 1 brier_class binary        0.0782\n```\n:::\n\n:::\n:::\n\n. . .\n\n¿Que tal si queremos comparar más modelos?\n\n. . .\n\n...y comparar configuraciones para los modelos?\n\n. . .\n\nY tambien queremos saber si las diferencias son importantes\n\n# Los datos de prueba son valiosos 💎\n\n# ¿Como podríamos usar los datos de entrenamiento para comparar y evaluar varios modelos?\n\n## Remuestreo\n\n\n```{mermaid}\n%%| eval: true\n%%| fig-width: 12\nflowchart TD\n  ad[Todos\\nlos datos]\n  style ad fill:#fff,stroke:#666,color:#000\n  tr[Entrenamiento]\n  style tr fill:#FBE9BF,stroke:#666,color:#000\n  ts[Prueba]\n  style ts fill:#E5E7FD,stroke:#666,color:#000\n  ad --> tr\n  ad --> ts\n  rm1[Remuestreo 1]\n  style rm1 fill:#fff,stroke:#666,color:#000\n  tr --> rm1\n  rm2[Remuestreo 2]\n  style rm2 fill:#fff,stroke:#666,color:#000\n  tr --> rm2\n  rm3[Remuestreo B]\n  style rm3 fill:#fff,stroke:#666,color:#000\n  tr --> rm3\n  an1[Analysis]\n  style an1 fill:#FBE9BF,stroke:#666,color:#000\n  rm1 --> an1\n  vl1[Validación]\n  style vl1 fill:#E5E7FD,stroke:#666,color:#000\n  rm1 --> vl1\n  an2[Analysis]\n  style an2 fill:#FBE9BF,stroke:#666,color:#000\n  rm2 --> an2\n  vl2[Validación]\n  style vl2 fill:#E5E7FD,stroke:#666,color:#000\n  rm2 --> vl2  \n  an3[Analysis]\n  style an3 fill:#FBE9BF,stroke:#666,color:#000\n  rm3 --> an3\n  vl3[Validación]\n  style vl3 fill:#E5E7FD,stroke:#666,color:#000\n  rm3 --> vl3    \n```\n\n\n## Validación cruzada\n\n![](https://www.tmwr.org/premade/three-CV.svg)\n\n## Validación cruzada\n\n![](images/cv-spanish.png)\n\n## Tu turno {transition=\"slide-in\"}\n\n![](images/parsnip-flagger.jpg){.absolute top=\"0\" right=\"0\" width=\"150\" height=\"150\"}\n\n*Si usamos 10 plieges (folds), cual es el porcentaje de datos de entrenamiento*\n\n-   *cuantos terminan en análisis*\n-   *cuantos terminan en evaluación (assesment)*\n\n*...para **cada** pliege?*\n\n![](images/taxi_spinning.svg){width=\"300\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"percent-in-folds\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">03</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## Validación cruzada ![](hexes/rsample.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvfold_cv(taxi_entrenar) \n#> #  10-fold cross-validation \n#> # A tibble: 10 × 2\n#>    splits             id    \n#>    <list>             <chr> \n#>  1 <split [7200/800]> Fold01\n#>  2 <split [7200/800]> Fold02\n#>  3 <split [7200/800]> Fold03\n#>  4 <split [7200/800]> Fold04\n#>  5 <split [7200/800]> Fold05\n#>  6 <split [7200/800]> Fold06\n#>  7 <split [7200/800]> Fold07\n#>  8 <split [7200/800]> Fold08\n#>  9 <split [7200/800]> Fold09\n#> 10 <split [7200/800]> Fold10\n```\n:::\n\n\n## Validación cruzada ![](hexes/rsample.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n¿Que hay en este?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntaxi_plieges <- vfold_cv(taxi_entrenar)\ntaxi_plieges$splits[1:3]\n#> [[1]]\n#> <Analysis/Assess/Total>\n#> <7200/800/8000>\n#> \n#> [[2]]\n#> <Analysis/Assess/Total>\n#> <7200/800/8000>\n#> \n#> [[3]]\n#> <Analysis/Assess/Total>\n#> <7200/800/8000>\n```\n:::\n\n\n::: notes\nTalk about a list column, storing non-atomic types in dataframe\n:::\n\n## Validación cruzada ![](hexes/rsample.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvfold_cv(taxi_entrenar, v = 5)\n#> #  5-fold cross-validation \n#> # A tibble: 5 × 2\n#>   splits              id   \n#>   <list>              <chr>\n#> 1 <split [6400/1600]> Fold1\n#> 2 <split [6400/1600]> Fold2\n#> 3 <split [6400/1600]> Fold3\n#> 4 <split [6400/1600]> Fold4\n#> 5 <split [6400/1600]> Fold5\n```\n:::\n\n\n## Validación cruzada ![](hexes/rsample.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvfold_cv(taxi_entrenar, strata = propina)\n#> #  10-fold cross-validation using stratification \n#> # A tibble: 10 × 2\n#>    splits             id    \n#>    <list>             <chr> \n#>  1 <split [7200/800]> Fold01\n#>  2 <split [7200/800]> Fold02\n#>  3 <split [7200/800]> Fold03\n#>  4 <split [7200/800]> Fold04\n#>  5 <split [7200/800]> Fold05\n#>  6 <split [7200/800]> Fold06\n#>  7 <split [7200/800]> Fold07\n#>  8 <split [7200/800]> Fold08\n#>  9 <split [7200/800]> Fold09\n#> 10 <split [7200/800]> Fold10\n```\n:::\n\n\n. . .\n\nEstratificar usualmente ayuda, y con pocos malas consecuencias \n\n## Validación cruzada ![](hexes/rsample.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\nUsaremos esto:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\ntaxi_plieges <- vfold_cv(taxi_entrenar, v = 10, strata = propina)\ntaxi_plieges\n#> #  10-fold cross-validation using stratification \n#> # A tibble: 10 × 2\n#>    splits             id    \n#>    <list>             <chr> \n#>  1 <split [7200/800]> Fold01\n#>  2 <split [7200/800]> Fold02\n#>  3 <split [7200/800]> Fold03\n#>  4 <split [7200/800]> Fold04\n#>  5 <split [7200/800]> Fold05\n#>  6 <split [7200/800]> Fold06\n#>  7 <split [7200/800]> Fold07\n#>  8 <split [7200/800]> Fold08\n#>  9 <split [7200/800]> Fold09\n#> 10 <split [7200/800]> Fold10\n```\n:::\n\n\n. . .\n\n\nEspecifica la semilla (seed) cuando estas creando remuestreos \n\n# Estamos equipados con métricas y remuestreos\n\n\n## Ajustemos nuestro modelo usando los remuestreos\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntaxi_res <- fit_resamples(arbol_flujo, taxi_plieges)\ntaxi_res\n#> # Resampling results\n#> # 10-fold cross-validation using stratification \n#> # A tibble: 10 × 4\n#>    splits             id     .metrics         .notes          \n#>    <list>             <chr>  <list>           <list>          \n#>  1 <split [7200/800]> Fold01 <tibble [2 × 4]> <tibble [0 × 3]>\n#>  2 <split [7200/800]> Fold02 <tibble [2 × 4]> <tibble [0 × 3]>\n#>  3 <split [7200/800]> Fold03 <tibble [2 × 4]> <tibble [0 × 3]>\n#>  4 <split [7200/800]> Fold04 <tibble [2 × 4]> <tibble [0 × 3]>\n#>  5 <split [7200/800]> Fold05 <tibble [2 × 4]> <tibble [0 × 3]>\n#>  6 <split [7200/800]> Fold06 <tibble [2 × 4]> <tibble [0 × 3]>\n#>  7 <split [7200/800]> Fold07 <tibble [2 × 4]> <tibble [0 × 3]>\n#>  8 <split [7200/800]> Fold08 <tibble [2 × 4]> <tibble [0 × 3]>\n#>  9 <split [7200/800]> Fold09 <tibble [2 × 4]> <tibble [0 × 3]>\n#> 10 <split [7200/800]> Fold10 <tibble [2 × 4]> <tibble [0 × 3]>\n```\n:::\n\n\n## Evaluando la calidad del modelo ![](hexes/tune.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntaxi_res %>%\n  collect_metrics()\n#> # A tibble: 2 × 6\n#>   .metric  .estimator  mean     n std_err .config             \n#>   <chr>    <chr>      <dbl> <int>   <dbl> <chr>               \n#> 1 accuracy binary     0.915    10 0.00309 Preprocessor1_Model1\n#> 2 roc_auc  binary     0.624    10 0.0105  Preprocessor1_Model1\n```\n:::\n\n\n::: notes\n`collect_metrics()` is one of a suite of `collect_*()` functions that can be used to work with columns of tuning results. Most columns in a tuning result prefixed with `.` have a corresponding `collect_*()` function with options for common summaries.\n:::\n\n. . .\n\nPodemos medir correctamente la la calidad del modelo usando solo los datos de entrenamiento 🎉\n\n## Comparando las métricas ![](hexes/yardstick.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n¿Que diferencia hay entre las métricas usando los datos de remuestreo, y usando\nlos datos de entrenamiento y prueba?\n\n\n::: {.cell}\n\n:::\n\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ntaxi_res %>%\n  collect_metrics() %>% \n  select(.metric, mean, n)\n#> # A tibble: 2 × 3\n#>   .metric   mean     n\n#>   <chr>    <dbl> <int>\n#> 1 accuracy 0.915    10\n#> 2 roc_auc  0.624    10\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\nEl ROC AUC antes era:\n\n- 0.69 para el set the entrenamiento\n- 0.64 para el set the prueba\n:::\n:::\n\n. . .\n\nAcuerdate que:\n\n⚠️ Los datos de entrenamiento da métricas demasiado optimísticas\n\n⚠️ Los datos de prueba son valiosos\n\n\n## Evaluando la calidad del modelo ![](hexes/tune.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\nctrl_taxi <- control_resamples(save_pred = TRUE)\ntaxi_res <- fit_resamples(arbol_flujo, taxi_plieges, control = ctrl_taxi)\n\ntaxi_res\n#> # Resampling results\n#> # 10-fold cross-validation using stratification \n#> # A tibble: 10 × 5\n#>    splits             id     .metrics         .notes           .predictions\n#>    <list>             <chr>  <list>           <list>           <list>      \n#>  1 <split [7200/800]> Fold01 <tibble [2 × 4]> <tibble [0 × 3]> <tibble>    \n#>  2 <split [7200/800]> Fold02 <tibble [2 × 4]> <tibble [0 × 3]> <tibble>    \n#>  3 <split [7200/800]> Fold03 <tibble [2 × 4]> <tibble [0 × 3]> <tibble>    \n#>  4 <split [7200/800]> Fold04 <tibble [2 × 4]> <tibble [0 × 3]> <tibble>    \n#>  5 <split [7200/800]> Fold05 <tibble [2 × 4]> <tibble [0 × 3]> <tibble>    \n#>  6 <split [7200/800]> Fold06 <tibble [2 × 4]> <tibble [0 × 3]> <tibble>    \n#>  7 <split [7200/800]> Fold07 <tibble [2 × 4]> <tibble [0 × 3]> <tibble>    \n#>  8 <split [7200/800]> Fold08 <tibble [2 × 4]> <tibble [0 × 3]> <tibble>    \n#>  9 <split [7200/800]> Fold09 <tibble [2 × 4]> <tibble [0 × 3]> <tibble>    \n#> 10 <split [7200/800]> Fold10 <tibble [2 × 4]> <tibble [0 × 3]> <tibble>\n```\n:::\n\n\n## Evaluando la calidad del modelo ![](hexes/tune.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Guarde los resultados de las evaluaciones\ntaxi_preds <- collect_predictions(taxi_res)\ntaxi_preds\n#> # A tibble: 8,000 × 7\n#>    id     .pred_si .pred_no  .row .pred_class propina .config             \n#>    <chr>     <dbl>    <dbl> <int> <fct>       <fct>   <chr>               \n#>  1 Fold01    0.938   0.0615    14 si          si      Preprocessor1_Model1\n#>  2 Fold01    0.946   0.0544    19 si          si      Preprocessor1_Model1\n#>  3 Fold01    0.973   0.0269    33 si          si      Preprocessor1_Model1\n#>  4 Fold01    0.903   0.0971    43 si          si      Preprocessor1_Model1\n#>  5 Fold01    0.973   0.0269    74 si          si      Preprocessor1_Model1\n#>  6 Fold01    0.903   0.0971   103 si          si      Preprocessor1_Model1\n#>  7 Fold01    0.915   0.0851   104 si          no      Preprocessor1_Model1\n#>  8 Fold01    0.903   0.0971   124 si          si      Preprocessor1_Model1\n#>  9 Fold01    0.667   0.333    126 si          si      Preprocessor1_Model1\n#> 10 Fold01    0.949   0.0510   128 si          si      Preprocessor1_Model1\n#> # ℹ 7,990 more rows\n```\n:::\n\n\n## Evaluando la calidad del modelo ![](hexes/tune.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntaxi_preds %>% \n  group_by(id) %>%\n  taxi_metrics(truth = propina, estimate = .pred_class)\n#> # A tibble: 30 × 4\n#>    id     .metric  .estimator .estimate\n#>    <chr>  <chr>    <chr>          <dbl>\n#>  1 Fold01 accuracy binary         0.905\n#>  2 Fold02 accuracy binary         0.925\n#>  3 Fold03 accuracy binary         0.926\n#>  4 Fold04 accuracy binary         0.915\n#>  5 Fold05 accuracy binary         0.902\n#>  6 Fold06 accuracy binary         0.912\n#>  7 Fold07 accuracy binary         0.906\n#>  8 Fold08 accuracy binary         0.91 \n#>  9 Fold09 accuracy binary         0.918\n#> 10 Fold10 accuracy binary         0.931\n#> # ℹ 20 more rows\n```\n:::\n\n\n## ¿Donde estan los modelos que ajustamos? ![](hexes/tune.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}  {.annotation}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntaxi_res\n#> # Resampling results\n#> # 10-fold cross-validation using stratification \n#> # A tibble: 10 × 5\n#>    splits             id     .metrics         .notes           .predictions\n#>    <list>             <chr>  <list>           <list>           <list>      \n#>  1 <split [7200/800]> Fold01 <tibble [2 × 4]> <tibble [0 × 3]> <tibble>    \n#>  2 <split [7200/800]> Fold02 <tibble [2 × 4]> <tibble [0 × 3]> <tibble>    \n#>  3 <split [7200/800]> Fold03 <tibble [2 × 4]> <tibble [0 × 3]> <tibble>    \n#>  4 <split [7200/800]> Fold04 <tibble [2 × 4]> <tibble [0 × 3]> <tibble>    \n#>  5 <split [7200/800]> Fold05 <tibble [2 × 4]> <tibble [0 × 3]> <tibble>    \n#>  6 <split [7200/800]> Fold06 <tibble [2 × 4]> <tibble [0 × 3]> <tibble>    \n#>  7 <split [7200/800]> Fold07 <tibble [2 × 4]> <tibble [0 × 3]> <tibble>    \n#>  8 <split [7200/800]> Fold08 <tibble [2 × 4]> <tibble [0 × 3]> <tibble>    \n#>  9 <split [7200/800]> Fold09 <tibble [2 × 4]> <tibble [0 × 3]> <tibble>    \n#> 10 <split [7200/800]> Fold10 <tibble [2 × 4]> <tibble [0 × 3]> <tibble>\n```\n:::\n\n\n. . .\n\n🗑️\n\n# Otros métodos de remuestreo \n\n## Bootstrapping \n\n![](images/bootstraps-spanish.png)\n\n## Bootstrapping ![](hexes/rsample.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(3214)\nbootstraps(taxi_entrenar)\n#> # Bootstrap sampling \n#> # A tibble: 25 × 2\n#>    splits              id         \n#>    <list>              <chr>      \n#>  1 <split [8000/2902]> Bootstrap01\n#>  2 <split [8000/2916]> Bootstrap02\n#>  3 <split [8000/3004]> Bootstrap03\n#>  4 <split [8000/2979]> Bootstrap04\n#>  5 <split [8000/2961]> Bootstrap05\n#>  6 <split [8000/2962]> Bootstrap06\n#>  7 <split [8000/3026]> Bootstrap07\n#>  8 <split [8000/2926]> Bootstrap08\n#>  9 <split [8000/2972]> Bootstrap09\n#> 10 <split [8000/2972]> Bootstrap10\n#> # ℹ 15 more rows\n```\n:::\n\n\n##  {background-iframe=\"https://rsample.tidymodels.org/reference/index.html\"}\n\n::: footer\n:::\n\n## Expectativas del taller - Donde estamos\n\n\n\n```{mermaid}\n%%| eval: true\n%%| fig-width: 12\nflowchart LR\n  ad[Todos\\nlos datos]\n  style ad fill:#fff,stroke:#666,color:#000\n  tr[Entrenamiento]\n  style tr fill:#FBE9BF,stroke:#666,color:#000\n  ts[Prueba]\n  style ts fill:#E5E7FD,stroke:#666,color:#000\n  ad --> tr\n  ad --> ts\n  rs[Remuestras]\n  style rs fill:#FDF4E3,stroke:#666,color:#000\n  tr --> rs\n  lg[Regresión\\nlogística]\n  style lg fill:#FDF4E3,stroke:#666,color:#000\n  rs --> lg\n  dt[Arbol de\\nDecisión]\n  style dt fill:#FDF4E3,stroke:#666,color:#000\n  rs --> dt\n  rf[Bosque\\nAleatorio]\n  style rf fill:#FDF4E3,stroke:#666,color:#000\n  rs --> rf\n  sm[Seleccionar\\nmodelo]\n  style sm fill:#fff,stroke:#eee,color:#ddd\n  lg --> sm\n  dt --> sm\n  rf --> sm\n  fm[Entrenar modelo\\nselecionado]\n  style fm fill:#fff,stroke:#eee,color:#ddd\n  sm --> fm\n  tr --> fm\n  vm[Verificar la\\ncalidad]\n  style vm fill:#fff,stroke:#eee,color:#ddd\n  fm --> vm\n  ts --> vm\n\n```\n\n\n## Tu turno {transition=\"slide-in\"}\n\n![](images/parsnip-flagger.jpg){.absolute top=\"0\" right=\"0\" width=\"150\" height=\"150\"}\n\n*Crea un:*\n\n-   *Set de validación cruzada tipo Monte Carlo*\n-   *Set de validación*\n\n\n*No te olvides de usar `set.seed()`*\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"try-rsample\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## Validación cruzada tipo Monte Carlo ![](hexes/rsample.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(322)\nmc_cv(taxi_entrenar, times = 10)\n#> # Monte Carlo cross-validation (0.75/0.25) with 10 resamples  \n#> # A tibble: 10 × 2\n#>    splits              id        \n#>    <list>              <chr>     \n#>  1 <split [6000/2000]> Resample01\n#>  2 <split [6000/2000]> Resample02\n#>  3 <split [6000/2000]> Resample03\n#>  4 <split [6000/2000]> Resample04\n#>  5 <split [6000/2000]> Resample05\n#>  6 <split [6000/2000]> Resample06\n#>  7 <split [6000/2000]> Resample07\n#>  8 <split [6000/2000]> Resample08\n#>  9 <split [6000/2000]> Resample09\n#> 10 <split [6000/2000]> Resample10\n```\n:::\n\n\n## Set de validación ![](hexes/rsample.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(853)\ntaxi_val_split <- initial_validation_split(taxi, strata = propina)\nvalidation_set(taxi_val_split)\n#> # A tibble: 1 × 2\n#>   splits              id        \n#>   <list>              <chr>     \n#> 1 <split [6000/2000]> validation\n```\n:::\n\n\n. . .\n\nUn set de validación es solamente otro tipo de remuestreo\n\n# Arbol de decisión 🌳\n\n# Bosque aleatorio 🌳🌲🌴🌵🌴🌳🌳🌴🌲🌵🌴🌲🌳🌴🌳🌵🌵🌴🌲🌲🌳🌴🌳🌴🌲🌴🌵🌴🌲🌴🌵🌲🌵🌴🌲🌳🌴🌵🌳🌴🌳\n\n## Bosque aleatorio 🌳🌲🌴🌵🌳🌳🌴🌲🌵🌴🌳🌵\n\n- Ensambla varios árboles de decisión\n\n- ¡Todos los árboles votan! 🗳️\n\n- Agregación tipo bootstrap + muestreo aleatorio del predictor\n\n. . .\n\n\n- Usualmente funciona bien sin usar afinamiento, pero solo mientras hayan \nsuficientes árboles\n\n## Crear un modelo de bosque aleatorio ![](hexes/parsnip.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_spec <- rand_forest(trees = 1000, mode = \"classification\")\nrf_spec\n#> Random Forest Model Specification (classification)\n#> \n#> Main Arguments:\n#>   trees = 1000\n#> \n#> Computational engine: ranger\n```\n:::\n\n\n## Crear un modelo de bosque aleatorio ![](hexes/workflows.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_wflow <- workflow(propina ~ ., rf_spec)\nrf_wflow\n#> ══ Workflow ══════════════════════════════════════════════════════════\n#> Preprocessor: Formula\n#> Model: rand_forest()\n#> \n#> ── Preprocessor ──────────────────────────────────────────────────────\n#> propina ~ .\n#> \n#> ── Model ─────────────────────────────────────────────────────────────\n#> Random Forest Model Specification (classification)\n#> \n#> Main Arguments:\n#>   trees = 1000\n#> \n#> Computational engine: ranger\n```\n:::\n\n\n## Tu turno {transition=\"slide-in\"}\n\n![](images/parsnip-flagger.jpg){.absolute top=\"0\" right=\"0\" width=\"150\" height=\"150\"}\n\n*Usa `fit_resamples()` y `rf_wflow` para lo siguiente:*\n\n-   *Quedarse con las predicciones*\n-   *Calcular las métricas*\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"try-fit-resamples\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">08</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## Evaluando la calidad del modelo ![](hexes/tune.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nctrl_taxi <- control_resamples(save_pred = TRUE)\n\n# Bosque aleatorio usan numeros al azar, asi que asegurate de definir la semilla\n\nset.seed(2)\nrf_res <- fit_resamples(rf_wflow, taxi_plieges, control = ctrl_taxi)\ncollect_metrics(rf_res)\n#> # A tibble: 2 × 6\n#>   .metric  .estimator  mean     n std_err .config             \n#>   <chr>    <chr>      <dbl> <int>   <dbl> <chr>               \n#> 1 accuracy binary     0.924    10 0.00323 Preprocessor1_Model1\n#> 2 roc_auc  binary     0.611    10 0.0149  Preprocessor1_Model1\n```\n:::\n\n\n## Expectativas del taller - Donde estamos\n\n\n\n```{mermaid}\n%%| eval: true\n%%| fig-width: 12\nflowchart LR\n  ad[Todos\\nlos datos]\n  style ad fill:#fff,stroke:#666,color:#000\n  tr[Entrenamiento]\n  style tr fill:#FBE9BF,stroke:#666,color:#000\n  ts[Prueba]\n  style ts fill:#E5E7FD,stroke:#666,color:#000\n  ad --> tr\n  ad --> ts\n  rs[Remuestras]\n  style rs fill:#FDF4E3,stroke:#666,color:#000\n  tr --> rs\n  lg[Regresión\\nlogística]\n  style lg fill:#FDF4E3,stroke:#666,color:#000\n  rs --> lg\n  dt[Arbol de\\nDecisión]\n  style dt fill:#FDF4E3,stroke:#666,color:#000\n  rs --> dt\n  rf[Bosque\\nAleatorio]\n  style rf fill:#FDF4E3,stroke:#666,color:#000\n  rs --> rf\n  sm[Seleccionar\\nmodelo]\n  style sm fill:#FDF4E3,stroke:#666,color:#000\n  lg --> sm\n  dt --> sm\n  rf --> sm\n  fm[Entrenar modelo\\nselecionado]\n  style fm fill:#fff,stroke:#eee,color:#ddd\n  sm --> fm\n  tr --> fm\n  vm[Verificar la\\ncalidad]\n  style vm fill:#fff,stroke:#eee,color:#ddd\n  fm --> vm\n  ts --> vm\n\n```\n\n\n## El ajuste final ![](hexes/tune.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"} \n\nDigamos que estamos satisfechos con usar nuestro modelo de bosque aleatorio\n\n\nAjustemos el modelo usando todos los datos en el set the entrenamiento, y despues\nmidamos la calidad del modelo con el set the prueba\n\n. . .\n\nHemos usado `fit()` y `predict()` (+ `augment()`),  pero hay un atajo:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# taxi_separar has train + test info\najuste_final <- last_fit(rf_wflow, taxi_separar) \n\najuste_final\n#> # Resampling results\n#> # Manual resampling \n#> # A tibble: 1 × 6\n#>   splits              id               .metrics .notes   .predictions .workflow \n#>   <list>              <chr>            <list>   <list>   <list>       <list>    \n#> 1 <split [8000/2000]> train/test split <tibble> <tibble> <tibble>     <workflow>\n```\n:::\n\n\n## ¿Que contiene `ajuste_final`? ![](hexes/tune.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect_metrics(ajuste_final)\n#> # A tibble: 2 × 4\n#>   .metric  .estimator .estimate .config             \n#>   <chr>    <chr>          <dbl> <chr>               \n#> 1 accuracy binary         0.914 Preprocessor1_Model1\n#> 2 roc_auc  binary         0.630 Preprocessor1_Model1\n```\n:::\n\n\n. . .\n\nLas métricas fueron calculadas con el set de **prueba**\n\n## ¿Que contiene `ajuste_final`? ![](hexes/tune.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect_predictions(ajuste_final)\n#> # A tibble: 2,000 × 7\n#>    id               .pred_si .pred_no  .row .pred_class propina .config         \n#>    <chr>               <dbl>    <dbl> <int> <fct>       <fct>   <chr>           \n#>  1 train/test split    0.949   0.0513     4 si          si      Preprocessor1_M…\n#>  2 train/test split    0.922   0.0777    10 si          si      Preprocessor1_M…\n#>  3 train/test split    0.961   0.0395    19 si          si      Preprocessor1_M…\n#>  4 train/test split    0.889   0.111     23 si          si      Preprocessor1_M…\n#>  5 train/test split    0.936   0.0639    28 si          si      Preprocessor1_M…\n#>  6 train/test split    0.969   0.0306    34 si          si      Preprocessor1_M…\n#>  7 train/test split    0.962   0.0377    35 si          si      Preprocessor1_M…\n#>  8 train/test split    0.939   0.0606    38 si          si      Preprocessor1_M…\n#>  9 train/test split    0.986   0.0138    40 si          si      Preprocessor1_M…\n#> 10 train/test split    0.957   0.0431    42 si          no      Preprocessor1_M…\n#> # ℹ 1,990 more rows\n```\n:::\n\n\n## ¿Que contiene `ajuste_final`? ![](hexes/tune.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_workflow(ajuste_final)\n#> ══ Workflow [trained] ════════════════════════════════════════════════\n#> Preprocessor: Formula\n#> Model: rand_forest()\n#> \n#> ── Preprocessor ──────────────────────────────────────────────────────\n#> propina ~ .\n#> \n#> ── Model ─────────────────────────────────────────────────────────────\n#> Ranger result\n#> \n#> Call:\n#>  ranger::ranger(x = maybe_data_frame(x), y = y, num.trees = ~1000,      num.threads = 1, verbose = FALSE, seed = sample.int(10^5,          1), probability = TRUE) \n#> \n#> Type:                             Probability estimation \n#> Number of trees:                  1000 \n#> Sample size:                      8000 \n#> Number of independent variables:  6 \n#> Mtry:                             2 \n#> Target node size:                 10 \n#> Variable importance mode:         none \n#> Splitrule:                        gini \n#> OOB prediction error (Brier s.):  0.07070342\n```\n:::\n\n\n. . .\n\nUse this for **prediction** on new data, like for deploying\n\n## Expectativas del taller - ¡Ya llegamos! \n\n\n```{mermaid}\n%%| eval: true\n%%| fig-width: 12\nflowchart LR\n  ad[Todos\\nlos datos]\n  style ad fill:#fff,stroke:#666,color:#000\n  tr[Entrenamiento]\n  style tr fill:#FBE9BF,stroke:#666,color:#000\n  ts[Prueba]\n  style ts fill:#E5E7FD,stroke:#666,color:#000\n  ad --> tr\n  ad --> ts\n  rs[Remuestreo]\n  style rs fill:#FDF4E3,stroke:#666,color:#000\n  tr --> rs\n  lg[Regresión\\nlogística]\n  style lg fill:#FDF4E3,stroke:#666,color:#000\n  rs --> lg\n  dt[Arbol de\\nDecisión]\n  style dt fill:#FDF4E3,stroke:#666,color:#000\n  rs --> dt\n  rf[Bosque\\nAleatorio]\n  style rf fill:#FDF4E3,stroke:#666,color:#000\n  rs --> rf\n  sm[Seleccionar\\nmodelo]\n  style sm fill:#FDF4E3,stroke:#666,color:#000\n  lg --> sm\n  dt --> sm\n  rf --> sm\n  fm[Entrenar modelo\\nselecionado]\n  style fm fill:#FBE9BF,stroke:#666,color:#000\n  sm --> fm\n  tr --> fm\n  vm[Verificar la\\ncalidad]\n  style vm fill:#E5E7FD,stroke:#666,color:#000\n  fm --> vm\n  ts --> vm\n\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}